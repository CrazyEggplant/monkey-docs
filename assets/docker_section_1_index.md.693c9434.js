import{_ as s,c as a,o as e,d as n}from"./app.dd217ea1.js";const m=JSON.parse('{"title":"Docker 笔记（一）","description":"","frontmatter":{},"headers":[{"level":3,"title":"1. Docker 安装","slug":"_1-docker-安装","link":"#_1-docker-安装","children":[]},{"level":3,"title":"2. Docker镜像源配置","slug":"_2-docker镜像源配置","link":"#_2-docker镜像源配置","children":[]},{"level":3,"title":"3. Docker镜像、容器关系","slug":"_3-docker镜像、容器关系","link":"#_3-docker镜像、容器关系","children":[]},{"level":3,"title":"4. Docker镜像常用操作","slug":"_4-docker镜像常用操作","link":"#_4-docker镜像常用操作","children":[]},{"level":3,"title":"5. Docker容器常用操作","slug":"_5-docker容器常用操作","link":"#_5-docker容器常用操作","children":[]},{"level":3,"title":"6. Dockerfile定制镜像","slug":"_6-dockerfile定制镜像","link":"#_6-dockerfile定制镜像","children":[]}],"relativePath":"docker/section_1/index.md"}'),l={name:"docker/section_1/index.md"},r=n(`<h1 id="docker-笔记-一" tabindex="-1">Docker 笔记（一） <a class="header-anchor" href="#docker-笔记-一" aria-hidden="true">#</a></h1><h3 id="_1-docker-安装" tabindex="-1">1. Docker 安装 <a class="header-anchor" href="#_1-docker-安装" aria-hidden="true">#</a></h3><h4 id="_1-1-使用命令安装-以ubuntu为例" tabindex="-1">1.1 使用命令安装(以ubuntu为例) <a class="header-anchor" href="#_1-1-使用命令安装-以ubuntu为例" aria-hidden="true">#</a></h4><ul><li>卸载旧版本</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">sudo apt-get remove docker docker-engine docker.io</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>添加使用 HTTPS 传输的软件包以及 CA 证书</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">sudo apt update</span></span>
<span class="line"><span style="color:#A6ACCD;">sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>添加软件源的 <code>GPG</code> 密钥</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>向 <code>sources.list</code> 中添加 Docker 软件源</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">echo \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>安装Docker</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">sudo apt-get install docker-ce docker-ce-cli containerd.io</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_1-2-使用脚本安装-建议使用" tabindex="-1">1.2 使用脚本安装（建议使用） <a class="header-anchor" href="#_1-2-使用脚本安装-建议使用" aria-hidden="true">#</a></h4><p>Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Ubuntu 系统上可以使用这套脚本安装，另外可以通过 <code>--mirror</code> 选项使用国内源进行安装：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">curl -fsSL get.docker.com -o get-docker.sh</span></span>
<span class="line"><span style="color:#A6ACCD;">sudo sh get-docker.sh --mirror Aliyun</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>注：此方法会将<code>/etc/apt/sources.list.d/docker.list</code>中的软件源设置为阿里源</strong></p><h4 id="_1-3-启动docker" tabindex="-1">1.3 启动Docker <a class="header-anchor" href="#_1-3-启动docker" aria-hidden="true">#</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">sudo systemctl enable docker</span></span>
<span class="line"><span style="color:#A6ACCD;">sudo systemctl start docker</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_1-4-将当前用户加入docker组" tabindex="-1">1.4 将当前用户加入Docker组 <a class="header-anchor" href="#_1-4-将当前用户加入docker组" aria-hidden="true">#</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">sudo groupadd docker</span></span>
<span class="line"><span style="color:#A6ACCD;">sudo usermod -aG docker $USER</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_1-5-验证docker是否正确安装" tabindex="-1">1.5 验证Docker是否正确安装 <a class="header-anchor" href="#_1-5-验证docker是否正确安装" aria-hidden="true">#</a></h4><p>重新打开终端，并输入如下命令：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker run --rm hello-world</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>若能正常输出信息，则说明安装成功。</p><h3 id="_2-docker镜像源配置" tabindex="-1">2. Docker镜像源配置 <a class="header-anchor" href="#_2-docker镜像源配置" aria-hidden="true">#</a></h3><ul><li>在 <code>/etc/docker/daemon.json</code> 中写入如下内容（如果文件不存在请新建该文件）：</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">registry-mirrors</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://hub-mirror.c.163.com</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://mirror.baidubce.com</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>重启服务</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">sudo systemctl daemon-reload</span></span>
<span class="line"><span style="color:#A6ACCD;">sudo systemctl restart docker</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3-docker镜像、容器关系" tabindex="-1">3. Docker镜像、容器关系 <a class="header-anchor" href="#_3-docker镜像、容器关系" aria-hidden="true">#</a></h3><p>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><h3 id="_4-docker镜像常用操作" tabindex="-1">4. Docker镜像常用操作 <a class="header-anchor" href="#_4-docker镜像常用操作" aria-hidden="true">#</a></h3><h4 id="_4-1-拉取镜像" tabindex="-1">4.1 拉取镜像 <a class="header-anchor" href="#_4-1-拉取镜像" aria-hidden="true">#</a></h4><p>从Docker镜像仓库获取镜像的命令是 <code>docker pull</code>。其命令格式为：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker pull 软件名[:标签]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>例如：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker pull ubuntu:18.04</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>若软件名后方无标签，则默认拉取latest版本</p><h4 id="_4-2-运行镜像" tabindex="-1">4.2 运行镜像 <a class="header-anchor" href="#_4-2-运行镜像" aria-hidden="true">#</a></h4><ul><li>运行镜像后，会创建容器，并运行。</li></ul><p>​ 以 <code>ubuntu:18.04</code> 为例，如果我们打算启动里面的 <code>bash</code> 并且进行交互式操作的话，可以执行如下命令：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker run -it --rm --name=test_ubuntu ubuntu:18.04 bash</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>参数解析：</p><ul><li><code>-it</code>：这是两个参数，一个是 <code>-i</code>：交互式操作，一个是 <code>-t</code> 终端。我们这里打算进入 <code>bash</code> 执行一些命令并查看返回结果，因此我们需要交互式终端</li><li><code>--rm</code>：容器退出后立即删除该容器</li><li><code>--name</code>：自定义容器名称</li><li><code>ubuntu:18.04</code>：用 <code>ubuntu:18.04</code> 镜像为基础来启动容器</li><li><code>bash</code>：指定交互式 Shell使用 <code>bash</code>。</li></ul><h4 id="_4-3-列出系统内的镜像" tabindex="-1">4.3 列出系统内的镜像 <a class="header-anchor" href="#_4-3-列出系统内的镜像" aria-hidden="true">#</a></h4><ul><li>想列出所有已经下载下来的镜像，可以使用如下命令:</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker images</span></span>
<span class="line"><span style="color:#A6ACCD;">或</span></span>
<span class="line"><span style="color:#A6ACCD;">docker image ls</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>列出部分镜像（以ubuntu为例），列出所有ubuntu镜像：</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker image ls ubuntu</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>列出特定的某个镜像（以ubuntu为例），指定软件名和标签：</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker image ls ubuntu:18.04</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_4-4-删除本地镜像" tabindex="-1">4.4 删除本地镜像 <a class="header-anchor" href="#_4-4-删除本地镜像" aria-hidden="true">#</a></h4><ul><li>删除本地的镜像，可以使用 <code>docker image rm</code> 命令，其格式为：</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>其中，<code>&lt;镜像&gt;</code> 可以是 <code>镜像短 ID</code>、<code>镜像长 ID</code>、<code>镜像名</code> 或者 <code>镜像摘要</code></p><h4 id="_4-5-导出镜像到文件" tabindex="-1">4.5 导出镜像到文件 <a class="header-anchor" href="#_4-5-导出镜像到文件" aria-hidden="true">#</a></h4><ul><li>使用 <code>docker save</code> 命令可以将镜像保存为归档文件。</li></ul><p>​ 若使用 <code>gzip</code> 压缩：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker save ubuntu:18.04 | gzip &gt; ubuntu1804.tar.gz</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_4-6-导入镜像" tabindex="-1">4.6 导入镜像 <a class="header-anchor" href="#_4-6-导入镜像" aria-hidden="true">#</a></h4><ul><li>将导出的镜像文件复制到另外的机器上，使用如下命令导入镜像：</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker load -i ubuntu1804.tar.gz</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_5-docker容器常用操作" tabindex="-1">5. Docker容器常用操作 <a class="header-anchor" href="#_5-docker容器常用操作" aria-hidden="true">#</a></h3><h4 id="_5-1-启动容器" tabindex="-1">5.1 启动容器 <a class="header-anchor" href="#_5-1-启动容器" aria-hidden="true">#</a></h4><ul><li>同本文<code>&lt;4.2 运行镜像&gt;</code></li></ul><h4 id="_5-2-后台运行" tabindex="-1">5.2 后台运行 <a class="header-anchor" href="#_5-2-后台运行" aria-hidden="true">#</a></h4><ul><li>启动容器时，输入<code>-d</code>参数，容器会在后台运行，并不会把输出的结果 (STDOUT) 打印到宿主机上面（输出结果可以用 <code>docker logs</code> 查看）。</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker run -d ubuntu:18.04 /bin/bash -c &quot;echo hello wrold&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_5-3-终止容器" tabindex="-1">5.3 终止容器 <a class="header-anchor" href="#_5-3-终止容器" aria-hidden="true">#</a></h4><ul><li>容器外部：使用 <code>docker container stop 容器ID</code> 来终止一个运行中的容器</li><li>容器内部：在容器的终端内，输入 <code>exit</code> 命令或 <code>Ctrl+d</code> ，所创建的容器立刻终止</li></ul><h4 id="_5-4-进入容器" tabindex="-1">5.4 进入容器 <a class="header-anchor" href="#_5-4-进入容器" aria-hidden="true">#</a></h4><ul><li>进入容器进行操作，使用 <code>docker exec</code> 命令：</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker exec -it 容器ID bash</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>注：使用<code>docker exec</code>命令进入容器内，在终端输入<code>exit</code>，退出容器时，不会导致容器停止</strong></p><h4 id="_5-5-查看运行中的容器" tabindex="-1">5.5 查看运行中的容器 <a class="header-anchor" href="#_5-5-查看运行中的容器" aria-hidden="true">#</a></h4><ul><li>查看运行中容器可使用如下命令：</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker ps</span></span>
<span class="line"><span style="color:#A6ACCD;">或</span></span>
<span class="line"><span style="color:#A6ACCD;">docker container ls</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_5-6-查看已经终止的容器" tabindex="-1">5.6 查看已经终止的容器 <a class="header-anchor" href="#_5-6-查看已经终止的容器" aria-hidden="true">#</a></h4><ul><li>查看已经终止容器可使用如下命令：</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker ps -a</span></span>
<span class="line"><span style="color:#A6ACCD;">或</span></span>
<span class="line"><span style="color:#A6ACCD;">docker container ls -a</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_5-7-删除容器" tabindex="-1">5.7 删除容器 <a class="header-anchor" href="#_5-7-删除容器" aria-hidden="true">#</a></h4><ul><li>使用 <code>docker container rm</code> 来删除一个处于终止状态的容器：</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker container rm 容器名</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>注：如果要删除一个运行中的容器，可以添加 <code>-f</code> 参数</strong></p><h4 id="_5-8-清除所有终止状态的容器" tabindex="-1">5.8 清除所有终止状态的容器 <a class="header-anchor" href="#_5-8-清除所有终止状态的容器" aria-hidden="true">#</a></h4><ul><li>使用 <code>docker container ls -a</code> 命令可以查看所有已经创建的包括终止状态的容器，用下面命令清除：</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker container prune</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_6-dockerfile定制镜像" tabindex="-1">6. Dockerfile定制镜像 <a class="header-anchor" href="#_6-dockerfile定制镜像" aria-hidden="true">#</a></h3><h4 id="_6-1-from" tabindex="-1">6.1 FROM <a class="header-anchor" href="#_6-1-from" aria-hidden="true">#</a></h4><ul><li><code>FROM</code>指定基础镜像，若本地没有镜像，则会从Docker Hub下载</li></ul><div class="language-dockerfile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">FROM ubuntu:16.04</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_6-2-workdir" tabindex="-1">6.2 WORKDIR <a class="header-anchor" href="#_6-2-workdir" aria-hidden="true">#</a></h4><ul><li><code>WORKDIR</code>指定工作目录，<strong>如果目录不存在，则会创建目录</strong></li></ul><div class="language-dockerfile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">FROM ubuntu:16.04</span></span>
<span class="line"><span style="color:#A6ACCD;">WROKDIR /home</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_6-3-copy" tabindex="-1">6.3 COPY <a class="header-anchor" href="#_6-3-copy" aria-hidden="true">#</a></h4><ul><li><code>COPY</code>将文或目录拷贝到镜像文件中</li></ul><div class="language-dockerfile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">FROM ubuntu:16.04</span></span>
<span class="line"><span style="color:#A6ACCD;">WROKDIR /home</span></span>
<span class="line"><span style="color:#A6ACCD;">COPY . /home</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_6-4-add" tabindex="-1">6.4 ADD <a class="header-anchor" href="#_6-4-add" aria-hidden="true">#</a></h4><ul><li><p><code>ADD</code>命令也具备拷贝文件的功能，但与<code>COPY</code>相比，它还具备如下功能：</p><pre><code>  1. 当拷贝的是压缩文件时，\`ADD\`命令会**自动解压文件**
  1. 拷贝的源文件路径可以为外部链接
</code></pre></li></ul><div class="language-dockerfile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">FROM ubuntu:16.04</span></span>
<span class="line"><span style="color:#A6ACCD;">WROKDIR /home</span></span>
<span class="line"><span style="color:#A6ACCD;">ADD xxx.tar.gz /home</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_6-5-run" tabindex="-1">6.5 RUN <a class="header-anchor" href="#_6-5-run" aria-hidden="true">#</a></h4><ul><li><code>RUN</code>用来执行命令行命令，共有<code>shell</code>和<code>exec</code>两种命令格式，此处推荐<code>shell</code>格式</li></ul><div class="language-dockerfile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">FROM ubuntu:16.04</span></span>
<span class="line"><span style="color:#A6ACCD;">RUN apt update \\</span></span>
<span class="line"><span style="color:#A6ACCD;">		&amp;&amp; apt install -y $softName \\</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_6-6-cmd" tabindex="-1">6.6 CMD <a class="header-anchor" href="#_6-6-cmd" aria-hidden="true">#</a></h4><ul><li><code>CMD</code> 用于指定默认的容器主进程的启动命令（容器启动时运行的命令），<code>CMD</code>运行的命令结束，容器生命周期也就结束了</li><li><code>CMD</code>也有<code>shel</code>l和<code>exec</code>两种命令格式</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">FROM ubuntu:16.04</span></span>
<span class="line"><span style="color:#A6ACCD;">CMD [&quot;cat&quot;, &quot;/etc/os-release&quot;]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,107),p=[r];function i(c,o,d,t,u,b){return e(),a("div",null,p)}const C=s(l,[["render",i]]);export{m as __pageData,C as default};
